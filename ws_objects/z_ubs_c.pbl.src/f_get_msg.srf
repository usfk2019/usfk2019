$PBExportHeader$f_get_msg.srf
$PBExportComments$For Program Run Time Message(Information)
global type f_get_msg from function_object
end type

forward prototypes
global function any f_get_msg (long al_info_code, string as_title, string as_text)
end prototypes

global function any f_get_msg (long al_info_code, string as_title, string as_text);//*******************************************************************
// Fuction ID : f_get_msg
//
// Purpose : Handle program run time message -Information
//
// Scope : Public
//
// Parameter :
//  1) al_info_code(Integer/Value) : Message No
//  2) as_title(String/Value) : Message title
//  3) as_text(String/Value) : Message additonal Text
//
// Return Value : (String)
//                In occasion of not display MessageBox & returned message content,
//                Set '*' on the right of as_title 
//						
// Log : (Date : Name : Version)
//       02/26/07 : Ispark : Original
//
//*******************************************************************
string ls_info_title			//Message title
string ls_info_content		//Message content
long   ll_length
String ls_text

ls_info_title = as_title

Choose Case gs_lang
	Case "K"
		Select msg_k
 		   Into :ls_info_content
		 From msginfo
		Where msgno = :al_info_code;
	Case "J"
		Select msg_j
 		   Into :ls_info_content
		 From msginfo
		Where msgno = :al_info_code;
	Case "E"
		Select msg_e
 		   Into :ls_info_content
		 From msginfo
		Where msgno = :al_info_code;
	Case Else		// MSG언어 미지정시 한국어 default
		Select msg_k
 		   Into :ls_info_content
		 From msginfo
		Where msgno = :al_info_code;
End Choose

If IsNull(ls_info_content) or ls_info_content = "" Then 
	ls_info_content = "Undefined message(msgno-" + String(al_info_code) + ")"
	MessageBox(ls_info_title, ls_info_content)
	Return -1
Else
	IF as_text <> "" THEN
		ls_text = '( ' + Trim(as_text) + ' )'
	ELSE 
		ls_text = ""
	END IF
	MessageBox(ls_info_title, ls_info_content + ls_text)
End if
 
Return ls_info_content
end function

